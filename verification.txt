boolean a7 b7 a6 b6 a5 b5 a4 b4 a3 b3 a2 b2 a1 b1 a0 b0
# The above command define the variable order of BDD
# a7-a0 is an 8-digit number, b7-b0 is another 8-digit number

# Define a reference 8-bit adder (copied from tests/adders/addr8.src)
# In this 8-bit adder, variable notation of t1, t2, t3, t4 is abused,
# which is not suggested, but allowed.

eval c0 a0 & b0

eval t1 a1 & b1
eval t2 a1 & c0
eval t3 b1 & c0
eval t4 t1 + t2
eval c1 t4 + t3

eval t1 a2 & b2
eval t2 a2 & c1
eval t3 b2 & c1
eval t4 t1 + t2
eval c2 t4 + t3

eval t1 a3 & b3
eval t2 a3 & c2
eval t3 b3 & c2
eval t4 t1 + t2
eval c3 t4 + t3

eval t1 a4 & b4
eval t2 a4 & c3
eval t3 b4 & c3
eval t4 t1 + t2
eval c4 t4 + t3

eval t1 a5 & b5
eval t2 a5 & c4
eval t3 b5 & c4
eval t4 t1 + t2
eval c5 t4 + t3

eval t1 a6 & b6
eval t2 a6 & c5
eval t3 b6 & c5
eval t4 t1 + t2
eval c6 t4 + t3

eval t1 a7 ^ b7
# obtain s7's true value
eval s7_true t1 ^ c6

bdd s7_true
size s7_true

# Your command starts here. Don't change above.
# You should start declaring your 8-bit Ling adder below.
###########################################################

# Find gi, pi, and ti for i = 0, 1, 2, ..., 7
eval g0 a0 & b0
eval p0 a0 + b0
eval T0 g0 ^ p0

eval g1 a1 & b1
eval p1 a1 + b1
eval T1 g1 ^ p1

eval g2 a2 & b2
eval p2 a2 + b2
eval T2 g2 ^ p2

eval g3 a3 & b3
eval p3 a3 + b3
eval T3 g3 ^ p3

eval g4 a4 & b4
eval p4 a4 + b4
eval T4 g4 ^ p4

eval g5 a5 & b5
eval p5 a5 + b5
eval T5 g5 ^ p5

eval g6 a6 & b6
eval p6 a6 + b6
eval T6 g6 ^ p6

eval g7 a7 & b7
eval p7 a7 + b7
eval T7 g7 ^ p7

# Calculate H1
eval p6p5 p6 & p5
eval p6p5g4 p6p5 & g4 
eval p6g5 p6 & g5
eval g6ORg7 g6 + g7
eval g6ORg7ORp6p5g4 g6ORg7 + p6p5g4
eval H1 g6ORg7ORp6p5g4 + p6g5

# Calculate H0
eval p2p1 p2 & p1
eval p2p1g0 p2p1 & g0
eval p2g1 p2 & g1
eval g2ORg3 g2 + g3
eval partial_H0 g2ORg3 + p2g1
eval H0 partial_H0 + p2p1g0

# Calculate P_6_3
eval p4p3 p4 & p3
eval P_6_3 p6p5 & p4p3

# Calculate h8
eval P_6_3H0 P_6_3 & H0
eval h8 H1 + P_6_3H0

eval c7 p7 & h8

# Calculate s7
eval s7 T7 ^ c7

bdd s7
size s7

eval s7_xor s7 ^ s7_true
eval funct !s7_xor

# Your command ends here. Don't change below.
# You should design the variable called 'funct' above.
###########################################################
# This should print ZERO if they are equal
bdd funct
size funct
quit